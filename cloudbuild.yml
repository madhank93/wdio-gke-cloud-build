steps:
  # This step builds the container image.
  - id: "Build e2e docker image"
    name: "gcr.io/cloud-builders/docker"
    args: ["build", "-t", "gcr.io/$PROJECT_ID/e2e", "."]

  # This step pushes the image to Container Registry
  # The PROJECT_ID and SHORT_SHA variables are automatically
  # replaced by Cloud Build.
  - name: "gcr.io/cloud-builders/docker"
    id: "Push docker image to container registry"
    args:
      - "push"
      - "gcr.io/$PROJECT_ID/e2e"

  # This step deploys the new version of our container image
  # in the Kubernetes Engine cluster.
  - name: "gcr.io/cloud-builders/gcloud"
    id: "Create GKE cluster"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        gcloud container clusters create --num-nodes=1 --machine-type=e2-standard-4

    env:
      - CLOUDSDK_COMPUTE_ZONE=$_CUSTOM_ZONE
      - CLOUDSDK_CONTAINER_CLUSTER=$_CUSTOM_CLUSTER

  # This step deploys the new version of our container image
  # in the Kubernetes Engine cluster.
  - name: "gcr.io/cloud-builders/gke-deploy"
    id: "Deploy selenosis setup"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        gcloud container clusters get-credentials
        sh ./selenosis-deploy/script.sh
    env:
      - CLOUDSDK_COMPUTE_ZONE=$_CUSTOM_ZONE
      - CLOUDSDK_CONTAINER_CLUSTER=$_CUSTOM_CLUSTER

  - name: "gcr.io/cloud-builders/gke-deploy"
    id: "Deploy e2e"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        gcloud container clusters get-credentials
        kubectl apply -f e2e-test.yml
    env:
      - CLOUDSDK_COMPUTE_ZONE=$_CUSTOM_ZONE
      - CLOUDSDK_CONTAINER_CLUSTER=$_CUSTOM_CLUSTER

substitutions:
  _CUSTOM_ZONE: asia-south1-a
  _CUSTOM_CLUSTER: gke-cluster
